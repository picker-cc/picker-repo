/*
您好欢迎来到 schema! Schema 是 Picker 的核心。

这里我们定义了我们的列表 `list`，然后将用于 GraphQL API 定义、数据表和 UI 布局。

一些快速的定义可以帮助你：
list：带有名称字段的集合定义。在 start 中我们有 `User`、`Post` 和 `Tag` 列表。
field：字段是列表中的单个数据，每个字段都有自己的类型。

你可以在下面的列表中看到这些：
*/


// 在 starter 中我们使用了一些通用字段。
// 请查看 https://picker.cc/docs/apis/fields#fields-api 中获取完整的字段列表。
import {
  text,
  relationship,
  password,
  timestamp,
  select,
  list,
} from '@picker-cc/core';

// document 是一个复杂的字段，在独立的包中，Picker 的目标是饮食所有基础字段类型，你可以自己创建属于自己的自字义字段。
// import { document } from '@picker-cc/fields-document';

// 我们正在使用 Typescript，并且我们希望我们的类型检验尽可能严格。
// 通过为我们的 Lists 对像提供 Picker 生成的 `Lists` 类型，我们将我们的类型细化为一个更严格的子集，它对我们的模式中的其他列表具有类型的感知能力，
// Typescript 不容易推断出这些列表。
// import { Lists } from '.picker/types';

// 我们有一个用户列表，一个博客的内容标签
// 导出对象上的每个属性都将成为列表的名称（也就是 `listKey`）其值是列表的定义，包括字段。
export const lists = {
  // 用户列表定义
  User: list({
    // 这里定义了几个 `User` 的字段，邮箱、密码方便用户进行登录，名称方便我们找到用户。以及一个用户关联博客内容的方法
    fields: {
      name: text({ validation: { isRequired: true } }),
      email: text({
        validation: { isRequired: true },
        isIndexed: 'unique',
        isFilterable: true,
      }),
      // password 字段方法负责将内容处理为哈希值
      password: password({ validation: { isRequired: true } }),
      // 一个用户会有多条内容，用户应该被博客内容的 `author` 字段关联，
      // 关于 relationship 的原理请务必阅读文档以深入理解：https://picker.cc/docs/guides/relationships#understanding-relationships
      posts: relationship({ ref: 'Post.author', many: true }),
    },
    // 在这里我们可以配置 Admin UI。在 Admin UI 中显示用户名和博客内容
    ui: {
      listView: {
        initialColumns: ['name', 'posts'],
      },
    },
  }),
  // 列表二是 Posts 列表。在这里定义博客内容饮食的所有信息
  Post: list({
    fields: {
      title: text(),
      // 状态字段，用于控制是否显示内容
      status: select({
        type: 'enum',
        options: [
          { label: '已发布', value: 'published' },
          { label: '草稿', value: 'draft' },
        ],
        // 我们希望确保新的文章内容在创建时是以草稿的状态开始的
        defaultValue: 'draft',
        // 配置字段在 Admin UI 中的交互外观
        ui: {
          displayMode: 'segmented-control',
        },
      }),

      // content 字段应该是 document 用于富文本编辑器的外观
      // content: document({
      //   formatting: true,
      //   layouts: [
      //     [1, 1],
      //     [1, 1, 1],
      //     [2, 1],
      //     [1, 2],
      //     [1, 2, 1],
      //   ],
      //   links: true,
      //   dividers: true,
      // }),
      content: text(),
      publishDate: timestamp(),
      // 这里链接的是 post => author
      author: relationship({
        ref: 'User.posts',
        ui: {
          displayMode: 'cards',
          cardFields: ['name', 'email'],
          inlineEdit: { fields: ['name', 'email'] },
          linkToItem: true,
          inlineConnect: true,
        },
      }),
      // We also link posts to tags. This is a many <=> many linking.
      // 文章的标签关联，这是一个 many <=> many 关联
      tags: relationship({
        ref: 'Tag.posts',
        ui: {
          displayMode: 'cards',
          cardFields: ['name'],
          inlineEdit: { fields: ['name'] },
          linkToItem: true,
          inlineConnect: true,
          inlineCreate: { fields: ['name'] },
        },
        many: true,
      }),
    },
  }),
  // 最后定义一个标签列表。这个列表只与 post 关联
  Tag: list({
    ui: {
      isHidden: true,
    },
    fields: {
      name: text(),
      posts: relationship({ ref: 'Post.tags', many: true }),
    },
  }),
};
