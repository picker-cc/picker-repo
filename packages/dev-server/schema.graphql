# 该文件由 Picker 自动生成，请勿手动修改。当您需要修改 Picker 配置时，请修改 Picker config。

type User {
  id: ID!
  name: String
  identifier: String
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  verified: Boolean
  enabled: Boolean
  lastLogin: DateTime
  password: PasswordState
  wechat: WechatUser
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  isAdmin: Boolean
}

scalar DateTime

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  identifier: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  identifier: StringFilter
  deletedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  verified: BooleanFilter
  enabled: BooleanFilter
  lastLogin: DateTimeNullableFilter
  password: PasswordFilter
  wechat: WechatUserWhereInput
  posts: PostManyRelationFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  identifier: OrderDirection
  deletedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  verified: OrderDirection
  enabled: OrderDirection
  lastLogin: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  identifier: String
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  verified: Boolean
  enabled: Boolean
  lastLogin: DateTime
  password: String
  wechat: WechatUserRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  isAdmin: Boolean
}

input WechatUserRelateToOneForUpdateInput {
  create: WechatUserCreateInput
  connect: WechatUserWhereUniqueInput
  disconnect: Boolean
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  identifier: String
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  verified: Boolean
  enabled: Boolean
  lastLogin: DateTime
  password: String
  wechat: WechatUserRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  isAdmin: Boolean
}

input WechatUserRelateToOneForCreateInput {
  create: WechatUserCreateInput
  connect: WechatUserWhereUniqueInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type WechatUser {
  id: ID!
  appId: String
  subscribed: Boolean
  openId: String
  unionId: String
  phone: String
  nickName: String
  gender: Int
  language: String
  city: String
  province: String
  country: String
  avatarUrl: String
  user: User
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input WechatUserWhereUniqueInput {
  id: ID
  openId: String
  unionId: String
  phone: String
}

input WechatUserWhereInput {
  AND: [WechatUserWhereInput!]
  OR: [WechatUserWhereInput!]
  NOT: [WechatUserWhereInput!]
  id: IDFilter
  appId: StringFilter
  subscribed: BooleanFilter
  openId: StringFilter
  unionId: StringFilter
  phone: StringFilter
  nickName: StringFilter
  gender: IntNullableFilter
  language: StringFilter
  city: StringFilter
  province: StringFilter
  country: StringFilter
  avatarUrl: StringFilter
  user: UserWhereInput
  deletedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input WechatUserOrderByInput {
  id: OrderDirection
  appId: OrderDirection
  subscribed: OrderDirection
  openId: OrderDirection
  unionId: OrderDirection
  phone: OrderDirection
  nickName: OrderDirection
  gender: OrderDirection
  language: OrderDirection
  city: OrderDirection
  province: OrderDirection
  country: OrderDirection
  avatarUrl: OrderDirection
  deletedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input WechatUserUpdateInput {
  appId: String
  subscribed: Boolean
  openId: String
  unionId: String
  phone: String
  nickName: String
  gender: Int
  language: String
  city: String
  province: String
  country: String
  avatarUrl: String
  user: UserRelateToOneForUpdateInput
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input WechatUserUpdateArgs {
  where: WechatUserWhereUniqueInput!
  data: WechatUserUpdateInput!
}

input WechatUserCreateInput {
  appId: String
  subscribed: Boolean
  openId: String
  unionId: String
  phone: String
  nickName: String
  gender: Int
  language: String
  city: String
  province: String
  country: String
  avatarUrl: String
  user: UserRelateToOneForCreateInput
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  status: PostStatusType
  content: String
  publishDate: DateTime
  user: User
  type: PostTypeType
  parent(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  parentCount(where: PostWhereInput! = {}): Int
  config: JSON
}

enum PostStatusType {
  published
  draft
}

enum PostTypeType {
  favorite
  memory
  story
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: PostStatusTypeNullableFilter
  content: StringFilter
  publishDate: DateTimeNullableFilter
  user: UserWhereInput
  type: PostTypeTypeNullableFilter
  parent: PostManyRelationFilter
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input PostTypeTypeNullableFilter {
  equals: PostTypeType
  in: [PostTypeType!]
  notIn: [PostTypeType!]
  not: PostTypeTypeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  content: OrderDirection
  publishDate: OrderDirection
  type: OrderDirection
}

input PostUpdateInput {
  title: String
  status: PostStatusType
  content: String
  publishDate: DateTime
  user: UserRelateToOneForUpdateInput
  type: PostTypeType
  parent: PostRelateToManyForUpdateInput
  config: JSON
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: PostStatusType
  content: String
  publishDate: DateTime
  user: UserRelateToOneForCreateInput
  type: PostTypeType
  parent: PostRelateToManyForCreateInput
  config: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createWechatUser(data: WechatUserCreateInput!): WechatUser
  createWechatUsers(data: [WechatUserCreateInput!]!): [WechatUser]
  updateWechatUser(
    where: WechatUserWhereUniqueInput!
    data: WechatUserUpdateInput!
  ): WechatUser
  updateWechatUsers(data: [WechatUserUpdateArgs!]!): [WechatUser]
  deleteWechatUser(where: WechatUserWhereUniqueInput!): WechatUser
  deleteWechatUsers(where: [WechatUserWhereUniqueInput!]!): [WechatUser]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  endSession: Boolean!
  authenticateUserWithPassword(
    identifier: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  identifier: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  wechatUsers(
    where: WechatUserWhereInput! = {}
    orderBy: [WechatUserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [WechatUser!]
  wechatUser(where: WechatUserWhereUniqueInput!): WechatUser
  wechatUsersCount(where: WechatUserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User
